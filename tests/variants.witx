enum e1 {
    a,
}

e1_arg: function(x: e1)
e1_result: function() -> e1

union u1 {
    u32,
    f32,
}

u1_arg: function(x: u1)
u1_result: function() -> u1

record empty {}

variant v1 {
    a,
    b(u1),
    c(e1),
    d(string),
    e(empty),
    f,
    g(u32),
}

v1_arg: function(x: v1)
v1_result: function() -> v1

bool_arg: function(x: bool)
bool_result: function() -> bool

option_arg: function(
  a: option<bool>,
  b: option<tuple<>>,
  c: option<u32>,
  d: option<e1>,
  e: option<f32>,
  f: option<u1>,
)
option_result: function() -> (
  option<bool>,
  option<tuple<>>,
  option<u32>,
  option<e1>,
  option<f32>,
  option<u1>,
)

expected_arg: function(
  a: expected<_, _>,
  b: expected<_, e1>,
  c: expected<e1, _>,
  d: expected<tuple<>, tuple<>>,
  e: expected<u32, v1>,
  f: expected<string, list<u8>>,
)
expected_result: function() -> (
  expected<_, _>,
  expected<_, e1>,
  expected<e1, _>,
  expected<tuple<>, tuple<>>,
  expected<u32, v1>,
  expected<string, list<u8>>,
)
