record list-in-record1 { a: string }
record list-in-record2 { a: string }
record list-in-record3 { a: string }
record list-in-record4 { a: string }
type list-in-alias = list-in-record4

list-in-record1: function(a: list-in-record1)
list-in-record2: function() -> list-in-record2
list-in-record3: function(a: list-in-record3) -> list-in-record3
list-in-record4: function(a: list-in-alias) -> list-in-alias

type list-in-variant1-v1 = option<string>
type list-in-variant1-v2 = expected<_, string>
union list-in-variant1-v3 { string, float32 }
list-in-variant1: function(a: list-in-variant1-v1, b: list-in-variant1-v2, c: list-in-variant1-v3)

type list-in-variant2 = option<string>
list-in-variant2: function() -> list-in-variant2

type list-in-variant3 = option<string>
list-in-variant3: function(a: list-in-variant3) -> list-in-variant3

enum my-errno { success, a, b }
errno-result: function() -> expected<_, my-errno>

type list-typedef = string
type list-typedef2 = list<u8>
type list-typedef3 = list<string>
list-typedefs: function(a: list-typedef, c: list-typedef3) -> tuple<list-typedef2, list-typedef3>

list-of-variants: function(a: list<bool>, b: list<expected<_, _>>, c: list<my-errno>) -> tuple<list<bool>, list<expected<_, _>>, list<my-errno>>
