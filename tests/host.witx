// ===========================================
// scalars
// ===========================================

roundtrip_u8: function(a: u8) -> u8
roundtrip_s8: function(a: s8) -> s8
roundtrip_u16: function(a: u16) -> u16
roundtrip_s16: function(a: s16) -> s16
roundtrip_u32: function(a: u32) -> u32
roundtrip_s32: function(a: s32) -> s32
roundtrip_u64: function(a: u64) -> u64
roundtrip_s64: function(a: s64) -> s64
roundtrip_f32: function(a: f32) -> f32
roundtrip_f64: function(a: f64) -> f64
roundtrip_char: function(a: char) -> char
// roundtrip_usize: function(a: usize) -> usize
multiple_results: function() -> (u8, u16)
set_scalar: function(a: u32)
get_scalar: function() -> u32

// ===========================================
// records
// ===========================================

swap_tuple: function(a: tuple<u8, u32>) -> tuple<u32, u8>

flags f1 { a, b }
roundtrip_flags1: function(a: f1) -> f1

flags f2 { c, d, e }
roundtrip_flags2: function(a: f2) -> f2

flags flag8 {
  b0, b1, b2, b3, b4, b5, b6, b7,
}

flags flag16 {
  b0, b1, b2, b3, b4, b5, b6, b7,
  b8, b9, b10, b11, b12, b13, b14, b15,
}

flags flag32 {
  b0, b1, b2, b3, b4, b5, b6, b7,
  b8, b9, b10, b11, b12, b13, b14, b15,
  b16, b17, b18, b19, b20, b21, b22, b23,
  b24, b25, b26, b27, b28, b29, b30, b31,
}

flags flag64 {
  b0, b1, b2, b3, b4, b5, b6, b7,
  b8, b9, b10, b11, b12, b13, b14, b15,
  b16, b17, b18, b19, b20, b21, b22, b23,
  b24, b25, b26, b27, b28, b29, b30, b31,
  b32, b33, b34, b35, b36, b37, b38, b39,
  b40, b41, b42, b43, b44, b45, b46, b47,
  b48, b49, b50, b51, b52, b53, b54, b55,
  b56, b57, b58, b59, b60, b61, b62, b63,
}

roundtrip_flags3: function(a: flag8, b: flag16, c: flag32, d: flag64) -> (flag8, flag16, flag32, flag64)

record r1 { a: u8, b: f1 }
roundtrip_record1: function(a: r1) -> r1

tuple0: function(a: tuple<>) -> tuple<>
tuple1: function(a: tuple<u8>) -> tuple<u8>

// ===========================================
// variants
// ===========================================

roundtrip_option: function(a: option<f32>) -> option<u8>
roundtrip_result: function(a: expected<u32, f32>) -> expected<f64, u8>

enum e1 { a, b }
roundtrip_enum: function(a: e1) -> e1

invert_bool: function(a: bool) -> bool

variant c1 { a(s32), b(s64) }
variant c2 { a(s32), b(f32) }
variant c3 { a(s32), b(f64) }
variant c4 { a(s64), b(f32) }
variant c5 { a(s64), b(f64) }
variant c6 { a(f32), b(f64) }
type casts = tuple<c1, c2, c3, c4, c5, c6>
variant_casts: function(a: casts) -> casts

variant z1 { a(s32), b }
variant z2 { a(s64), b }
variant z3 { a(f32), b }
variant z4 { a(f64), b }
type zeros = tuple<z1, z2, z3, z4>
variant_zeros: function(a: zeros) -> zeros

type option_typedef = option<u32>
type bool_typedef = bool
type result_typedef = expected<u32, _>
variant_typedefs: function(a: option_typedef, b: bool_typedef, c: result_typedef)

variant_enums: function(a: bool, b: expected<_, _>, c: my_errno) -> (bool, expected<_, _>, my_errno)

// ===========================================
// lists
// ===========================================

list_param: function(a: list<u8>)
list_param2: function(a: string)
list_param3: function(a: list<string>)
list_param4: function(a: list<list<string>>)
list_result: function() -> list<u8>
list_result2: function() -> string
list_result3: function() -> list<string>

string_roundtrip: function(a: string) -> string

unaligned_roundtrip1: function(a: list<u16>, b: list<u32>, c: list<u64>, d: list<flag32>, e: list<flag64>)

record unaligned_record { a: u32, b: u64 }
unaligned_roundtrip2: function(a: list<unaligned_record>, b: list<f32>, c: list<f64>, d: list<string>, e: list<list<u8>>)

// ===========================================
// handles
// ===========================================

resource host_state
resource host_state2

host_state_create: function() -> host_state
host_state_get: function(a: host_state) -> u32

host_state2_create: function() -> host_state2
host_state2_saw_close: function() -> bool
two_host_states: function(a: host_state, b: host_state2) -> (host_state, host_state2)

record host_state_param_record { a: host_state2 }
host_state2_param_record: function(a: host_state_param_record)

type host_state_param_tuple = tuple<host_state2>
host_state2_param_tuple: function(a: host_state_param_tuple)

type host_state_param_option = option<host_state2>
host_state2_param_option: function(a: host_state_param_option)

type host_state_param_result = expected<host_state2, u32>
host_state2_param_result: function(a: host_state_param_result)

union host_state_param_variant { host_state2, u32 }
host_state2_param_variant: function(a: host_state_param_variant)

host_state2_param_list: function(a: list<host_state2>)


record host_state_result_record { a: host_state2 }
host_state2_result_record: function() -> host_state_result_record

type host_state_result_tuple = tuple<host_state2>
host_state2_result_tuple: function() -> host_state_result_tuple

type host_state_result_option = option<host_state2>
host_state2_result_option: function() -> host_state_result_option

type host_state_result_result = expected<host_state2, u32>
host_state2_result_result: function() -> host_state_result_result

union host_state_result_variant { host_state2, u32 }
host_state2_result_variant: function() -> host_state_result_variant

host_state2_result_list: function() -> list<host_state2>

/* TODO
resource markdown {
    static create: function() -> option<markdown>
    append: function(buf: string)
    render: function() -> string
}
*/

// ===========================================
// buffers
// ===========================================

buffer_u8: function(a: pull-buffer<u8>, b: push-buffer<u8>) -> u32
buffer_u32: function(a: pull-buffer<u32>, b: push-buffer<u32>) -> u32
buffer_bool: function(a: pull-buffer<bool>, b: push-buffer<bool>) -> u32

/*
(export "buffer_string" (func (param $a (in-buffer string)) (param $b (out-buffer string)) (result $r u32)))
(export "buffer_list_bool" (func (param $a (in-buffer (list bool))) (param $b (out-buffer (list bool))) (result $r u32)))
(export "buffer_buffer_bool" (func (param $a (in-buffer (in-buffer bool)))))
*/

buffer_mutable1: function(a: list<pull-buffer<bool>>)
buffer_mutable2: function(a: list<push-buffer<u8>>) -> u32
buffer_mutable3: function(a: list<push-buffer<bool>>) -> u32

variant buffer_in_variant {
  a(push-buffer<u8>),
  b(pull-buffer<u8>),
  c(push-buffer<bool>),
  d(pull-buffer<bool>),
}

record buffer_in_record {
  a: push-buffer<u8>,
  b: pull-buffer<u8>,
  c: push-buffer<bool>,
  d: pull-buffer<bool>,
  e: buffer_in_variant,
}
buffer_in_record: function(a: buffer_in_record)

type param_in_buffer_u8 = push-buffer<u8>
type param_out_buffer_u8 = pull-buffer<u8>
type param_in_buffer_bool = push-buffer<bool>
type param_out_buffer_bool = pull-buffer<bool>
buffer_typedef: function(a: param_in_buffer_u8, b: param_out_buffer_u8, c: param_in_buffer_bool, d: param_out_buffer_bool)

// ===========================================
// More flavorful types
// ===========================================

record list_in_record1 { a: string }
record list_in_record2 { a: string }
record list_in_record3 { a: string }
record list_in_record4 { a: string }
type list_in_alias = list_in_record4

list_in_record1: function(a: list_in_record1)
list_in_record2: function() -> list_in_record2
list_in_record3: function(a: list_in_record3) -> list_in_record3
list_in_record4: function(a: list_in_alias) -> list_in_alias

type list_in_variant1_1 = option<string>
type list_in_variant1_2 = expected<_, string>
union list_in_variant1_3 { string, f32 }
list_in_variant1: function(a: list_in_variant1_1, b: list_in_variant1_2, c: list_in_variant1_3)

type list_in_variant2 = option<string>
list_in_variant2: function() -> list_in_variant2

type list_in_variant3 = option<string>
list_in_variant3: function(a: list_in_variant3) -> list_in_variant3

enum my_errno { success, a, b }
errno_result: function() -> expected<_, my_errno>

type list_typedef = string
type list_typedef2 = list<u8>
type list_typedef3 = list<string>
list_typedefs: function(a: list_typedef, c: list_typedef3) -> (list_typedef2, list_typedef3)

list_of_variants: function(a: list<bool>, b: list<expected<_, _>>, c: list<my_errno>) -> (list<bool>, list<expected<_, _>>, list<my_errno>)
