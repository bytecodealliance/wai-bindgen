// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
#[allow(dead_code, clippy::all)]
pub mod test {
    pub mod test {

        #[allow(dead_code, clippy::all)]
        pub mod stream_source {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;

            use wit_bindgen_symmetric_rt::async_support::Stream;

            use super::super::super::_rt;

            #[allow(unused_unsafe, clippy::all)]
            pub async fn create() -> wit_bindgen_symmetric_rt::async_support::StreamReader<u32> {
                unsafe {
                    let layout1 = _rt::alloc::Layout::from_size_align_unchecked(8, 8);
                    let ptr1 = _rt::alloc::alloc(layout1);

                    #[link(wasm_import_module = "test:test/stream-source")]
                    #[link(name = "source")]
                    extern "C" {
                        #[cfg_attr(target_arch = "wasm32", link_name = "[async]create")]
                        fn testX3AtestX2Fstream_sourceX00X5BasyncX5Dcreate(_: *mut u8) -> *mut u8;
                    }
                    ::wit_bindgen_symmetric_rt::async_support::await_result(move || unsafe {
                        testX3AtestX2Fstream_sourceX00X5BasyncX5Dcreate(ptr1)
                    })
                    .await;
                    let l3 = *ptr1.add(0).cast::<*mut u8>();
                    let result4 = wit_bindgen_symmetric_rt::async_support::StreamReader::new(
                        Stream::from_handle(l3 as usize),
                    );
                    _rt::cabi_dealloc(ptr1, 8, 8);
                    result4
                }
            }
        }
    }
}
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod test {
        pub mod test {

            #[allow(dead_code, clippy::all)]
            pub mod stream_test {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_create_cabi<T: Guest>(results: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::create();
                    let result = ::wit_bindgen_symmetric_rt::async_support::first_poll(
                        result0,
                        move |result1| {
                            let outptr = results.cast::<*mut ()>();
                            *(unsafe { &mut *outptr }) = result1.into_handle().cast();
                        },
                    );

                    result.cast()
                }
                pub trait Guest {
                    fn create() -> impl ::core::future::Future<
                        Output = ::wit_bindgen_symmetric_rt::async_support::StreamReader<u32>,
                    > + 'static;
                }
                #[doc(hidden)]

                macro_rules! __export_test_test_stream_test_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[cfg_attr(target_arch = "wasm32", export_name = "create")]
          #[cfg_attr(not(target_arch = "wasm32"), no_mangle)]
          unsafe extern "C" fn testX3AtestX2Fstream_testX00X5BasyncX5Dcreate(results: *mut u8) -> *mut u8 {
            $($path_to_types)*::_export_create_cabi::<$ty>(results)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_test_test_stream_test_cabi;
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::alloc;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen::rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
pub mod wit_stream {
    #![allow(dead_code, clippy::all)]

    use wit_bindgen_symmetric_rt::async_support::stream_support::new_stream;

    pub trait StreamPayload: Unpin + Sized + 'static {}

    impl StreamPayload for u32 {}

    pub fn new<T: StreamPayload>() -> (
        ::wit_bindgen_symmetric_rt::async_support::StreamWriter<T>,
        ::wit_bindgen_symmetric_rt::async_support::StreamReader<T>,
    ) {
        new_stream()
    }
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_stream_world_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::test::test::stream_test::__export_test_test_stream_test_cabi!($ty with_types_in $($path_to_types_root)*::exports::test::test::stream_test);
  )
}
#[doc(inline)]
pub(crate) use __export_stream_world_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:test:test:stream-world:encoded world"]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 262] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x83\x01\x01A\x02\x01\
A\x04\x01B\x03\x01fy\x01@\0\0\0\x04\0\x06create\x01\x01\x03\0\x17test:test/strea\
m-source\x05\0\x01B\x03\x01fy\x01@\0\0\0\x04\0\x06create\x01\x01\x04\0\x15test:t\
est/stream-test\x05\x01\x04\0\x16test:test/stream-world\x04\0\x0b\x12\x01\0\x0cs\
tream-world\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x07\
0.221.2\x10wit-bindgen-rust\x060.36.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen::rt::maybe_link_cabi_realloc();
}
