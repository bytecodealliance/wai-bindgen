enum e1 {
    a,
}

e1-arg: function(x: e1)
e1-result: function() -> e1

union u1 {
    u32,
    float32,
}

u1-arg: function(x: u1)
u1-result: function() -> u1

record empty {}

variant v1 {
    a,
    b(u1),
    c(e1),
    d(string),
    e(empty),
    f,
    g(u32),
}

v1-arg: function(x: v1)
v1-result: function() -> v1

bool-arg: function(x: bool)
bool-result: function() -> bool

option-arg: function(
  a: option<bool>,
  b: option<tuple<>>,
  c: option<u32>,
  d: option<e1>,
  e: option<float32>,
  f: option<u1>,
  g: option<option<bool>>,
)
option-result: function() -> tuple<
  option<bool>,
  option<tuple<>>,
  option<u32>,
  option<e1>,
  option<float32>,
  option<u1>,
  option<option<bool>>,
>

variant casts1 {
  a(s32),
  b(float32),
}

variant casts2 {
  a(float64),
  b(float32),
}

variant casts3 {
  a(float64),
  b(u64),
}

variant casts4 {
  a(u32),
  b(s64),
}

variant casts5 {
  a(float32),
  b(s64),
}

variant casts6 {
  a(tuple<float32, u32>),
  b(tuple<u32, u32>),
}

casts: function(
  a: casts1,
  b: casts2,
  c: casts3,
  d: casts4,
  e: casts5,
  f: casts6,
) -> tuple<
  casts1,
  casts2,
  casts3,
  casts4,
  casts5,
  casts6,
>

expected-arg: function(
  a: expected<_, _>,
  b: expected<_, e1>,
  c: expected<e1, _>,
  d: expected<tuple<>, tuple<>>,
  e: expected<u32, v1>,
  f: expected<string, list<u8>>,
)
expected-result: function() -> tuple<
  expected<_, _>,
  expected<_, e1>,
  expected<e1, _>,
  expected<tuple<>, tuple<>>,
  expected<u32, v1>,
  expected<string, list<u8>>,
>
